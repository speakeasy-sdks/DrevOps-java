/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package DrevOps.CircleCi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GetProjectWorkflowMetrics200ApplicationJSONItemsMetrics - Metrics relating to a workflow's runs.
 */
public class GetProjectWorkflowMetrics200ApplicationJSONItemsMetrics {
    /**
     * Metrics relating to the duration of runs for a workflow.
     */
    @JsonProperty("duration_metrics")
    public GetProjectWorkflowMetrics200ApplicationJSONItemsMetricsDurationMetrics durationMetrics;

    public GetProjectWorkflowMetrics200ApplicationJSONItemsMetrics withDurationMetrics(GetProjectWorkflowMetrics200ApplicationJSONItemsMetricsDurationMetrics durationMetrics) {
        this.durationMetrics = durationMetrics;
        return this;
    }
    
    /**
     * The number of failed runs.
     */
    @JsonProperty("failed_runs")
    public Long failedRuns;

    public GetProjectWorkflowMetrics200ApplicationJSONItemsMetrics withFailedRuns(Long failedRuns) {
        this.failedRuns = failedRuns;
        return this;
    }
    
    /**
     * The mean time to recovery (mean time between failures and their next success) in seconds.
     */
    @JsonProperty("mttr")
    public Long mttr;

    public GetProjectWorkflowMetrics200ApplicationJSONItemsMetrics withMttr(Long mttr) {
        this.mttr = mttr;
        return this;
    }
    
    @JsonProperty("success_rate")
    public Float successRate;

    public GetProjectWorkflowMetrics200ApplicationJSONItemsMetrics withSuccessRate(Float successRate) {
        this.successRate = successRate;
        return this;
    }
    
    /**
     * The number of successful runs.
     */
    @JsonProperty("successful_runs")
    public Long successfulRuns;

    public GetProjectWorkflowMetrics200ApplicationJSONItemsMetrics withSuccessfulRuns(Long successfulRuns) {
        this.successfulRuns = successfulRuns;
        return this;
    }
    
    /**
     * The average number of runs per day.
     */
    @JsonProperty("throughput")
    public Float throughput;

    public GetProjectWorkflowMetrics200ApplicationJSONItemsMetrics withThroughput(Float throughput) {
        this.throughput = throughput;
        return this;
    }
    
    /**
     * The total credits consumed by the workflow in the aggregation window. Note that Insights is not a real time financial reporting tool and should not be used for credit reporting.
     */
    @JsonProperty("total_credits_used")
    public Long totalCreditsUsed;

    public GetProjectWorkflowMetrics200ApplicationJSONItemsMetrics withTotalCreditsUsed(Long totalCreditsUsed) {
        this.totalCreditsUsed = totalCreditsUsed;
        return this;
    }
    
    /**
     * The number of recovered workflow executions per day.
     */
    @JsonProperty("total_recoveries")
    public Long totalRecoveries;

    public GetProjectWorkflowMetrics200ApplicationJSONItemsMetrics withTotalRecoveries(Long totalRecoveries) {
        this.totalRecoveries = totalRecoveries;
        return this;
    }
    
    /**
     * The total number of runs.
     */
    @JsonProperty("total_runs")
    public Long totalRuns;

    public GetProjectWorkflowMetrics200ApplicationJSONItemsMetrics withTotalRuns(Long totalRuns) {
        this.totalRuns = totalRuns;
        return this;
    }
    
    public GetProjectWorkflowMetrics200ApplicationJSONItemsMetrics(@JsonProperty("duration_metrics") GetProjectWorkflowMetrics200ApplicationJSONItemsMetricsDurationMetrics durationMetrics, @JsonProperty("failed_runs") Long failedRuns, @JsonProperty("mttr") Long mttr, @JsonProperty("success_rate") Float successRate, @JsonProperty("successful_runs") Long successfulRuns, @JsonProperty("throughput") Float throughput, @JsonProperty("total_credits_used") Long totalCreditsUsed, @JsonProperty("total_recoveries") Long totalRecoveries, @JsonProperty("total_runs") Long totalRuns) {
        this.durationMetrics = durationMetrics;
        this.failedRuns = failedRuns;
        this.mttr = mttr;
        this.successRate = successRate;
        this.successfulRuns = successfulRuns;
        this.throughput = throughput;
        this.totalCreditsUsed = totalCreditsUsed;
        this.totalRecoveries = totalRecoveries;
        this.totalRuns = totalRuns;
  }
}
