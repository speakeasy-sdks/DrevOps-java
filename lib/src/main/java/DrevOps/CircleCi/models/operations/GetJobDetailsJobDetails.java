/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package DrevOps.CircleCi.models.operations;

import DrevOps.CircleCi.utils.DateTimeDeserializer;
import DrevOps.CircleCi.utils.DateTimeSerializer;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;

/**
 * GetJobDetailsJobDetails - Job Details
 */
public class GetJobDetailsJobDetails {
    /**
     * List of contexts used by the job.
     */
    @JsonProperty("contexts")
    public GetJobDetailsJobDetailsContexts[] contexts;

    public GetJobDetailsJobDetails withContexts(GetJobDetailsJobDetailsContexts[] contexts) {
        this.contexts = contexts;
        return this;
    }
    
    /**
     * The time when the job was created.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public GetJobDetailsJobDetails withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Duration of a job in milliseconds.
     */
    @JsonProperty("duration")
    public Long duration;

    public GetJobDetailsJobDetails withDuration(Long duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * Information about executor used for a job.
     */
    @JsonProperty("executor")
    public GetJobDetailsJobDetailsExecutor executor;

    public GetJobDetailsJobDetails withExecutor(GetJobDetailsJobDetailsExecutor executor) {
        this.executor = executor;
        return this;
    }
    
    /**
     * Info about the latest workflow the job was a part of.
     */
    @JsonProperty("latest_workflow")
    public GetJobDetailsJobDetailsLatestWorkflow latestWorkflow;

    public GetJobDetailsJobDetails withLatestWorkflow(GetJobDetailsJobDetailsLatestWorkflow latestWorkflow) {
        this.latestWorkflow = latestWorkflow;
        return this;
    }
    
    /**
     * Messages from CircleCI execution platform.
     */
    @JsonProperty("messages")
    public GetJobDetailsJobDetailsMessages[] messages;

    public GetJobDetailsJobDetails withMessages(GetJobDetailsJobDetailsMessages[] messages) {
        this.messages = messages;
        return this;
    }
    
    /**
     * The name of the job.
     */
    @JsonProperty("name")
    public String name;

    public GetJobDetailsJobDetails withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The number of the job.
     */
    @JsonProperty("number")
    public Long number;

    public GetJobDetailsJobDetails withNumber(Long number) {
        this.number = number;
        return this;
    }
    
    /**
     * Information about an organization.
     */
    @JsonProperty("organization")
    public GetJobDetailsJobDetailsOrganization organization;

    public GetJobDetailsJobDetails withOrganization(GetJobDetailsJobDetailsOrganization organization) {
        this.organization = organization;
        return this;
    }
    
    /**
     * Info about parallels runs and their status.
     */
    @JsonProperty("parallel_runs")
    public GetJobDetailsJobDetailsParallelRuns[] parallelRuns;

    public GetJobDetailsJobDetails withParallelRuns(GetJobDetailsJobDetailsParallelRuns[] parallelRuns) {
        this.parallelRuns = parallelRuns;
        return this;
    }
    
    /**
     * A number of parallel runs the job has.
     */
    @JsonProperty("parallelism")
    public Long parallelism;

    public GetJobDetailsJobDetails withParallelism(Long parallelism) {
        this.parallelism = parallelism;
        return this;
    }
    
    /**
     * Info about a pipeline the job is a part of.
     */
    @JsonProperty("pipeline")
    public GetJobDetailsJobDetailsPipeline pipeline;

    public GetJobDetailsJobDetails withPipeline(GetJobDetailsJobDetailsPipeline pipeline) {
        this.pipeline = pipeline;
        return this;
    }
    
    /**
     * Information about a project.
     */
    @JsonProperty("project")
    public GetJobDetailsJobDetailsProject project;

    public GetJobDetailsJobDetails withProject(GetJobDetailsJobDetailsProject project) {
        this.project = project;
        return this;
    }
    
    /**
     * The time when the job was placed in a queue.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("queued_at")
    public OffsetDateTime queuedAt;

    public GetJobDetailsJobDetails withQueuedAt(OffsetDateTime queuedAt) {
        this.queuedAt = queuedAt;
        return this;
    }
    
    /**
     * The date and time the job started.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("started_at")
    public OffsetDateTime startedAt;

    public GetJobDetailsJobDetails withStartedAt(OffsetDateTime startedAt) {
        this.startedAt = startedAt;
        return this;
    }
    
    /**
     * The current status of the job.
     */
    @JsonProperty("status")
    public GetJobDetailsJobDetailsStatus status;

    public GetJobDetailsJobDetails withStatus(GetJobDetailsJobDetailsStatus status) {
        this.status = status;
        return this;
    }
    
    /**
     * The time when the job stopped.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("stopped_at")
    public OffsetDateTime stoppedAt;

    public GetJobDetailsJobDetails withStoppedAt(OffsetDateTime stoppedAt) {
        this.stoppedAt = stoppedAt;
        return this;
    }
    
    /**
     * URL of the job in CircleCI Web UI.
     */
    @JsonProperty("web_url")
    public String webUrl;

    public GetJobDetailsJobDetails withWebUrl(String webUrl) {
        this.webUrl = webUrl;
        return this;
    }
    
    public GetJobDetailsJobDetails(@JsonProperty("contexts") GetJobDetailsJobDetailsContexts[] contexts, @JsonProperty("created_at") OffsetDateTime createdAt, @JsonProperty("duration") Long duration, @JsonProperty("executor") GetJobDetailsJobDetailsExecutor executor, @JsonProperty("latest_workflow") GetJobDetailsJobDetailsLatestWorkflow latestWorkflow, @JsonProperty("messages") GetJobDetailsJobDetailsMessages[] messages, @JsonProperty("name") String name, @JsonProperty("number") Long number, @JsonProperty("organization") GetJobDetailsJobDetailsOrganization organization, @JsonProperty("parallel_runs") GetJobDetailsJobDetailsParallelRuns[] parallelRuns, @JsonProperty("parallelism") Long parallelism, @JsonProperty("pipeline") GetJobDetailsJobDetailsPipeline pipeline, @JsonProperty("project") GetJobDetailsJobDetailsProject project, @JsonProperty("queued_at") OffsetDateTime queuedAt, @JsonProperty("started_at") OffsetDateTime startedAt, @JsonProperty("status") GetJobDetailsJobDetailsStatus status, @JsonProperty("web_url") String webUrl) {
        this.contexts = contexts;
        this.createdAt = createdAt;
        this.duration = duration;
        this.executor = executor;
        this.latestWorkflow = latestWorkflow;
        this.messages = messages;
        this.name = name;
        this.number = number;
        this.organization = organization;
        this.parallelRuns = parallelRuns;
        this.parallelism = parallelism;
        this.pipeline = pipeline;
        this.project = project;
        this.queuedAt = queuedAt;
        this.startedAt = startedAt;
        this.status = status;
        this.webUrl = webUrl;
  }
}
