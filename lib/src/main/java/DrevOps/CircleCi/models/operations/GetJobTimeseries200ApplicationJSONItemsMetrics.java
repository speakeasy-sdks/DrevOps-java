/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package DrevOps.CircleCi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GetJobTimeseries200ApplicationJSONItemsMetrics - Metrics relating to a workflow's runs.
 */
public class GetJobTimeseries200ApplicationJSONItemsMetrics {
    /**
     * Metrics relating to the duration of runs for a workflow.
     */
    @JsonProperty("duration_metrics")
    public GetJobTimeseries200ApplicationJSONItemsMetricsDurationMetrics durationMetrics;
    public GetJobTimeseries200ApplicationJSONItemsMetrics withDurationMetrics(GetJobTimeseries200ApplicationJSONItemsMetricsDurationMetrics durationMetrics) {
        this.durationMetrics = durationMetrics;
        return this;
    }
    
    /**
     * The number of failed runs.
     */
    @JsonProperty("failed_runs")
    public Long failedRuns;
    public GetJobTimeseries200ApplicationJSONItemsMetrics withFailedRuns(Long failedRuns) {
        this.failedRuns = failedRuns;
        return this;
    }
    
    /**
     * The median credits consumed over the current timeseries interval.
     */
    @JsonProperty("median_credits_used")
    public Long medianCreditsUsed;
    public GetJobTimeseries200ApplicationJSONItemsMetrics withMedianCreditsUsed(Long medianCreditsUsed) {
        this.medianCreditsUsed = medianCreditsUsed;
        return this;
    }
    
    /**
     * The number of successful runs.
     */
    @JsonProperty("successful_runs")
    public Long successfulRuns;
    public GetJobTimeseries200ApplicationJSONItemsMetrics withSuccessfulRuns(Long successfulRuns) {
        this.successfulRuns = successfulRuns;
        return this;
    }
    
    /**
     * The average number of runs per day.
     */
    @JsonProperty("throughput")
    public Float throughput;
    public GetJobTimeseries200ApplicationJSONItemsMetrics withThroughput(Float throughput) {
        this.throughput = throughput;
        return this;
    }
    
    /**
     * The total credits consumed over the current timeseries interval.
     */
    @JsonProperty("total_credits_used")
    public Long totalCreditsUsed;
    public GetJobTimeseries200ApplicationJSONItemsMetrics withTotalCreditsUsed(Long totalCreditsUsed) {
        this.totalCreditsUsed = totalCreditsUsed;
        return this;
    }
    
    /**
     * The total number of runs.
     */
    @JsonProperty("total_runs")
    public Long totalRuns;
    public GetJobTimeseries200ApplicationJSONItemsMetrics withTotalRuns(Long totalRuns) {
        this.totalRuns = totalRuns;
        return this;
    }
    
    public GetJobTimeseries200ApplicationJSONItemsMetrics(@JsonProperty("duration_metrics") GetJobTimeseries200ApplicationJSONItemsMetricsDurationMetrics durationMetrics, @JsonProperty("failed_runs") Long failedRuns, @JsonProperty("median_credits_used") Long medianCreditsUsed, @JsonProperty("successful_runs") Long successfulRuns, @JsonProperty("throughput") Float throughput, @JsonProperty("total_credits_used") Long totalCreditsUsed, @JsonProperty("total_runs") Long totalRuns) {
        this.durationMetrics = durationMetrics;
        this.failedRuns = failedRuns;
        this.medianCreditsUsed = medianCreditsUsed;
        this.successfulRuns = successfulRuns;
        this.throughput = throughput;
        this.totalCreditsUsed = totalCreditsUsed;
        this.totalRuns = totalRuns;
  }
}
